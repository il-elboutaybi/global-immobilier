/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import * as fs from "fs";
export type NodeType = "hidden" | "array" | "string" | "object" | "code" | "closure" | "regexp" | "number" | "native" | "synthetic" | "concatenated string" | "sliced string" | "symbol" | "bigint" | "object shape" | "wasm object";
export type EdgeType = "context" | "element" | "property" | "internal" | "hidden" | "shortcut" | "weak";
export interface Node {
    readonly type: NodeType;
    readonly name: string;
    readonly id: number;
    readonly self_size: number;
    readonly edge_count: number;
    readonly trace_node_id: number;
    readonly detached?: boolean;
    readonly out_edges: Edge[];
    readonly in_edges: Edge[];
    toLongString(): string;
    print(deep?: number, indent?: number, edge_prefix?: string): void;
}
export interface Edge {
    readonly type: EdgeType;
    readonly name: string | number;
    readonly from: Node;
    readonly to: Node;
    toLongString(): string;
}
export interface Snapshot {
    readonly nodes: Node[];
    readonly edges: Edge[];
    readonly global: Node;
    readonly modules: Node[];
    readonly hasDetachedness: boolean;
    findNodeById(id: number): Node | undefined;
}
export declare function parseSnapshot(stream: fs.ReadStream): Promise<Snapshot>;
export declare function parseSnapshot(json: string): Promise<Snapshot>;
export declare function parseSnapshot(obj: Object): Promise<Snapshot>;
export declare function parseSnapshotFromFile(filename: fs.PathLike, options?: BufferEncoding | {
    flags?: string | undefined;
    encoding?: BufferEncoding | undefined;
    fd?: number | fs.promises.FileHandle | undefined;
    mode?: number | undefined;
    autoClose?: boolean | undefined;
    emitClose?: boolean | undefined;
    start?: number | undefined;
    highWaterMark?: number | undefined;
    end?: number | undefined;
}): Promise<Snapshot>;
